# QUalquer programa Python em execução tem diversos dicionários ativos simultaneamente, mesmo que o código do programa do usuário
# não utilize explicitamente um dicionário.
# Dicionários trazem um KVP

# as próprias funções embutidas ficam em um dicionário: __builtins__.__dict__

# Os dicionários em Python são extremamente otimizados -> as tabelas hash são o mecanismo responsável pelo seu alto desempenho

# MY_DICT = {} --------> entre chaves. Listas entre colchetes. Tuplas entre parênteses
# Todos os tipos de mapeamento da biblioteca-padrão usam o tipo básico dict em sua implementação, portanto uma limitação comum a esses tipos
# é que as chaves precisam ser hashable (os valores não precisam ser hashable, somente as chaves)

my_dict = {}
isinstance(my_dict,abc.Mapping)
isinstance(my_dict,int)

# O que é hashable? um objeto é hashable se tiver um valor de hash que nunca mude durante seu tempo de vida
# deve ter um método __hash__() e puder ser comparado com outros objetos (deve ter um método __eq__()). 
# Objetos hashable comparados como iguais devem ter o mesmo valor de hash 

# Os tipos imutáveis atômicos (str, bytes, tipos numéricos) são todos hashable. Um fronzenset,
# é sempre hashable porque seus elementos devem ser hashable por definição. Uma tupla será hashable somente se todos os seus itens forem
# hashable.

tt = (1,2,(30,40))
hash(tt) 
tl = (1,2,[30,40]) # Aqui temos uma lista aninhada em uma tupla - linhas são unhashables. Irá gerar erro.
hash(tl)
tf = (1,2,frozenset([30,40]))
hash(tf)

# Os tipos definidos por usuário são hashable por padrão, pois seus valores de hash são seus id() e, na comparação,
# todos são diferentes. Se um objeto implementar um __eq__  personalizado que leve em consideração o seu estado interno, ele poderá
# ser hashable somente se todos os seus atributos forem imutáveis.

a = dict(one=1, two=2, three=3)
b = {'one': 1, 'two': 2, 'three': 3}
c = dict((zip['one','two','three'], [1,2,3]))
d = dict([('two',2),('one',1),('three',3)])
e = dict({'three':3,'one':1,'two':2})
a==b==c==d==e

# uma dict comprehension (dictcomp) cria uma instância de dict produzindo pares key:value a partir de qualquer iterável.

DIAL_CODES = [
  (86,'China'),
  (91,'India'),
  (1,'United States'),
  (62,'Indonesia'),
  (55,'Brazil'),
  (92,'Pakistan'),
  (880,'Bangladesh'),
  (234,'Nigeria'),
  (7,'Russia'),
  (81,'Japan')]
country_code = {country: code for code, country in DIAL_CODES}
country_code
{code:country.upper() for country,code in country_code.items() if code < 66}
 
import sys
import re

WORD_RE = re.compile('\w+')
index={}
with open(sys.argv[1], encoding = 'utf-8') as fp:
  for line_no, line in enumerate(fp,1):
    for match in WORD_RE.finditer(line):
      word = match.group()
      column_no = match.start() + 1
      location = (line_no., column_no)
      index.setdefault(word,[]).append(location)
for word in sorted(index, key = str.upper):
  print(word, index[word])

# Os conjuntos (sets) são acréscimos relativamente novos a história do Python e são subutilizados. O tipo set e seu irmão
# imutável frozenset apareceram inicialmente em um módulo de Python 2.3 e foram promovidos a tipos embutidos em Python 2.6.
# UM CONJUNTO É UMA COLEÇÃO DE OBJETOS ÚNICOS - um caso de uso básico é remover duplicações


l = ['spam','spam','eggs','spam']
set(l)

# Elementos de conjunto devem ser hashable. o tipo set não é hashable, mas frozenset é, portanto podem ter elementos frozenset
# em um set. 

# Além de garantir a unicidade, conjuntos implementam as operações essenciais de conjuntos como operadores infixos:; sendo assim
# dados dois conjuntos a e b, a | b devolve a união, a & b devolve a intersecção e a-b calcula a diferença entre dois conjuntos.
# Retira muita lógica condicional do programa.

s ={1}
type(s)
s.pop()

frozenset(range(10)) # hashable e imutável
# em a.union(b,c,d) --> b,c,d podem ser iteráveis de qualquer jeito. somente 'a' necessariamente precisa ser um set

# dicts e sets são bem mais rápidos que lists. Python utiliza uma tabela HASH para implementar um dict - otimização do código CPython.

# Uma tabela hash é um array esparso (ou seja, um array que sempre tem células vazias). Em textos-padrões sobre estruturas de dados,
# as células em uma tabela hash geralmente são chamadas de "buckets". Como todos os buckets têm o mesmo tamanho, o acesso a um bucket
# individual é feito pelo offset. O interpretador Python tenta manter pelo menos um terço dos buckets vazio; 
# O interpretador tenta manter a tabela hash esparsa - se a tabela hash ficar muito cheia, ela será copiada para um novo local, com 
# espaço para mais buckets.

# Para colocar um item em uma tabela hash, o primeiro passo é calcular o valor de hash da chave do item, o que é feito com a 
# função embutida hash() - chama o dunder method __hash__

# Se dois objetos forem comparados como iguais, seus valores de hash também devem ser iguais. Se 1 == 1.0, então hash(1) = hash (1.0)

# Além disso, para ser eficiente como índices da tabela hash, os valores de hash devem estar espalhados o máximo possível
# no espaço usadp pelos índices. Isso quer dizer que, idealmente, objetos semelhantes mas não iguais devem ter valores de hash bem 
# diferentes














